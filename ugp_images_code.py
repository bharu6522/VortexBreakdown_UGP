# -*- coding: utf-8 -*-
"""ugp_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dJTODahI2CeOsMxqBcY8WplVZlwkKHfu
"""

import os
import numpy as np
import matplotlib.pyplot as plt

# Clear variables
plt.clf()
plt.cla()
plt.close('all')

# Parameters
nx = 241
ny = 241
Lx = 20
Ly = 20
pathReq = '/content/ugp_files'
nCont = 50
pathOut = '/content/ugp_images'
dT = 0.01 * 1000
cMin = -0.2
cMax = 1.5

# Generate grid to visualize
x = np.linspace(0, Lx, nx)
y = np.linspace(-Ly/2, Ly/2, ny)
X, Y = np.meshgrid(x, y)
izMid = (ny - 1) // 2 + 1

# Read each file and plot
figH = plt.figure()
for fNo in range(1, 1000):
    filename = os.path.join(pathReq, f'ux{fNo:03d}')
    if not os.path.exists(filename):
        break
    with open(filename, 'rb') as fid:
        ux = np.fromfile(fid, dtype=np.double)
        ux = ux.reshape((nx, ny, ny))
        uxZ0 = ux[:, :, izMid - 1].T
    plt.contourf(X, Y, uxZ0, levels=np.linspace(cMin, cMax, nCont), edgecolors='none')
    plt.clim([cMin, cMax])
    plt.colorbar()
    plt.axis('tight')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.text(Lx - 4, Ly/2 - 1, f't = {int(dT * fNo)}')
    plt.savefig(f'{pathOut}uxContour{fNo:03d}.png')
    plt.clf()
    plt.cla()
    plt.close(figH)

from IPython.display import Image

Image(filename='/content/ugp_imagesuxContour001.png')

# from IPython.display import Image
 
# for i in range(1,6):
#     filename = f'/content/ugp_imagesuxContour00{i}.png'
#     display(Image(filename=filename,width=1000))

# from IPython.display import Image

# for i in range(1, 6):
#     filename = f'/content/ugp_imagesuxContour00{i}.png'
#     display(Image(filename=filename,width=800, height=600))

# from IPython.display import Image
# from PIL import Image as PILImage

# for i in range(1, 6):
#     filename = f'/content/ugp_imagesuxContour00{i}.png'
#     img = PILImage.open(filename)
#     img = img.resize((200, 200))
#     display(Image(data=img.tobytes(), format='png', width=800, height=600, embed=True))

# from IPython.display import Image
# from PIL import Image as PILImage

# for i in range(1, 6):
#     filename = f'/content/ugp_imagesuxContour00{i}.png'
#     img = PILImage.open(filename)
#     img = img.resize((800, 600))
#     display(Image(data=img.tobytes(), format='png', width=400, height=400))

# import matplotlib.pyplot as plt
# import numpy as np

# # Load the PNG image as a numpy array
# img = plt.imread('/content/ugp_imagesuxContour001.png')

# # Display the image as a contour plot
# plt.contour(img, cmap='gray')
# plt.show()

# import matplotlib.pyplot as plt
# import numpy as np

# # Load the PNG image as a numpy array
# img = plt.imread('/content/ugp_imagesuxContour001.png')

# # Take a slice of the image to create a 2D array
# slice_idx = 0 # choose a fixed value for one of the dimensions
# slice_img = img[:,:,slice_idx]

# # Display the 2D slice of the image as a contour plot
# plt.contour(slice_img, cmap='gray')
# plt.show()

# from mpl_toolkits.mplot3d import Axes3D

# # Load the PNG image as a numpy array
# img = plt.imread('/content/ugp_imagesuxContour001.png')

# # Create a meshgrid from the image dimensions
# x, y = np.meshgrid(range(img.shape[1]), range(img.shape[0]))

# # Display the image as a 3D surface plot
# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
# ax.plot_surface(x, y, img, cmap='gray')
# plt.show()